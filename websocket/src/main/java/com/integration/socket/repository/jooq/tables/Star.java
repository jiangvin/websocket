/*
 * This file is generated by jOOQ.
 */
package com.integration.socket.repository.jooq.tables;


import com.integration.socket.repository.jooq.DefaultSchema;
import com.integration.socket.repository.jooq.Indexes;
import com.integration.socket.repository.jooq.Keys;
import com.integration.socket.repository.jooq.tables.records.StarRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Star extends TableImpl<StarRecord> {

    private static final long serialVersionUID = -775963754;

    /**
     * The reference instance of <code>star</code>
     */
    public static final Star STAR = new Star();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StarRecord> getRecordType() {
        return StarRecord.class;
    }

    /**
     * The column <code>star.user_id</code>.
     */
    public final TableField<StarRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>star.map_id</code>.
     */
    public final TableField<StarRecord, Integer> MAP_ID = createField("map_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>star.sub_id</code>.
     */
    public final TableField<StarRecord, Integer> SUB_ID = createField("sub_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>star.hard_mode</code>.
     */
    public final TableField<StarRecord, Boolean> HARD_MODE = createField("hard_mode", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>star.star</code>.
     */
    public final TableField<StarRecord, Integer> STAR_ = createField("star", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>star.create_time</code>.
     */
    public final TableField<StarRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>star.update_time</code>.
     */
    public final TableField<StarRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>star</code> table reference
     */
    public Star() {
        this(DSL.name("star"), null);
    }

    /**
     * Create an aliased <code>star</code> table reference
     */
    public Star(String alias) {
        this(DSL.name(alias), STAR);
    }

    /**
     * Create an aliased <code>star</code> table reference
     */
    public Star(Name alias) {
        this(alias, STAR);
    }

    private Star(Name alias, Table<StarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Star(Name alias, Table<StarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Star(Table<O> child, ForeignKey<O, StarRecord> key) {
        super(child, key, STAR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STAR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StarRecord> getPrimaryKey() {
        return Keys.KEY_STAR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StarRecord>> getKeys() {
        return Arrays.<UniqueKey<StarRecord>>asList(Keys.KEY_STAR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Star as(String alias) {
        return new Star(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Star as(Name alias) {
        return new Star(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Star rename(String name) {
        return new Star(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Star rename(Name name) {
        return new Star(name, null);
    }
}
